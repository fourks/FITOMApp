// LCDView.cpp : 実装ファイル
//

#include "stdafx.h"
#include "FITOMApp.h"
#include "LCDView.h"

BYTE fonttable[] = {
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x07E, 0x042, 0x07E, 0x042, 0x07E, 0x042, 0x082, 0x000,
	0x010, 0x092, 0x054, 0x010, 0x028, 0x044, 0x082, 0x000,
	0x012, 0x014, 0x0F8, 0x014, 0x034, 0x052, 0x092, 0x000,
	0x010, 0x010, 0x0FE, 0x010, 0x038, 0x054, 0x092, 0x000,
	0x010, 0x028, 0x07C, 0x092, 0x038, 0x054, 0x0FE, 0x000,
	0x010, 0x010, 0x010, 0x07C, 0x010, 0x010, 0x0FE, 0x000,
	0x07E, 0x042, 0x042, 0x07E, 0x042, 0x042, 0x07E, 0x000,
	0x040, 0x07E, 0x048, 0x03C, 0x028, 0x07E, 0x008, 0x000,
	0x0FE, 0x092, 0x092, 0x0FE, 0x082, 0x082, 0x086, 0x000,
	0x004, 0x0EE, 0x0A4, 0x0EF, 0x0A2, 0x0EA, 0x006, 0x000,
	0x028, 0x044, 0x082, 0x03C, 0x014, 0x024, 0x04C, 0x000,
	0x028, 0x0C8, 0x05C, 0x0EA, 0x06C, 0x0C8, 0x050, 0x000,
	0x07C, 0x020, 0x07C, 0x044, 0x07C, 0x044, 0x07C, 0x000,
	0x00C, 0x070, 0x010, 0x0FE, 0x010, 0x010, 0x010, 0x000,
	0x07E, 0x010, 0x01E, 0x012, 0x022, 0x044, 0x008, 0x000,
	0x000, 0x07C, 0x028, 0x028, 0x028, 0x04E, 0x000, 0x000,
	0x010, 0x010, 0x010, 0x0FF, 0x000, 0x000, 0x000, 0x000,
	0x000, 0x000, 0x000, 0x0FF, 0x010, 0x010, 0x010, 0x010,
	0x010, 0x010, 0x010, 0x0F0, 0x010, 0x010, 0x010, 0x010,
	0x010, 0x010, 0x010, 0x01F, 0x010, 0x010, 0x010, 0x010,
	0x010, 0x010, 0x010, 0x0FF, 0x010, 0x010, 0x010, 0x010,
	0x010, 0x010, 0x010, 0x010, 0x010, 0x010, 0x010, 0x010,
	0x000, 0x000, 0x000, 0x0FF, 0x000, 0x000, 0x000, 0x000,
	0x000, 0x000, 0x000, 0x01F, 0x010, 0x010, 0x010, 0x010,
	0x000, 0x000, 0x000, 0x0F0, 0x010, 0x010, 0x010, 0x010,
	0x010, 0x010, 0x010, 0x01F, 0x000, 0x000, 0x000, 0x000,
	0x010, 0x010, 0x010, 0x0F0, 0x000, 0x000, 0x000, 0x000,
	0x081, 0x042, 0x024, 0x018, 0x018, 0x024, 0x042, 0x081,
	0x010, 0x07C, 0x010, 0x010, 0x028, 0x044, 0x082, 0x000,
	0x010, 0x010, 0x0FE, 0x092, 0x0FE, 0x010, 0x010, 0x000,
	0x010, 0x010, 0x054, 0x054, 0x092, 0x010, 0x030, 0x000,
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x020, 0x020, 0x020, 0x020, 0x000, 0x000, 0x020, 0x000,
	0x050, 0x050, 0x050, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x050, 0x050, 0x0F8, 0x050, 0x0F8, 0x050, 0x050, 0x000,
	0x020, 0x078, 0x0A0, 0x070, 0x028, 0x0F0, 0x020, 0x000,
	0x0C0, 0x0C8, 0x010, 0x020, 0x040, 0x098, 0x018, 0x000,
	0x040, 0x0A0, 0x040, 0x0A8, 0x090, 0x098, 0x060, 0x000,
	0x010, 0x020, 0x040, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x010, 0x020, 0x040, 0x040, 0x040, 0x020, 0x010, 0x000,
	0x040, 0x020, 0x010, 0x010, 0x010, 0x020, 0x040, 0x000,
	0x020, 0x0A8, 0x070, 0x020, 0x070, 0x0A8, 0x020, 0x000,
	0x000, 0x020, 0x020, 0x0F8, 0x020, 0x020, 0x000, 0x000,
	0x000, 0x000, 0x000, 0x000, 0x000, 0x020, 0x020, 0x040,
	0x000, 0x000, 0x000, 0x078, 0x000, 0x000, 0x000, 0x000,
	0x000, 0x000, 0x000, 0x000, 0x000, 0x060, 0x060, 0x000,
	0x000, 0x000, 0x008, 0x010, 0x020, 0x040, 0x080, 0x000,
	0x070, 0x088, 0x098, 0x0A8, 0x0C8, 0x088, 0x070, 0x000,
	0x020, 0x060, 0x0A0, 0x020, 0x020, 0x020, 0x0F8, 0x000,
	0x070, 0x088, 0x008, 0x010, 0x060, 0x080, 0x0F8, 0x000,
	0x070, 0x088, 0x008, 0x030, 0x008, 0x088, 0x070, 0x000,
	0x010, 0x030, 0x050, 0x090, 0x0F8, 0x010, 0x010, 0x000,
	0x0F8, 0x080, 0x0E0, 0x010, 0x008, 0x010, 0x0E0, 0x000,
	0x030, 0x040, 0x080, 0x0F0, 0x088, 0x088, 0x070, 0x000,
	0x0F8, 0x088, 0x010, 0x020, 0x020, 0x020, 0x020, 0x000,
	0x070, 0x088, 0x088, 0x070, 0x088, 0x088, 0x070, 0x000,
	0x070, 0x088, 0x088, 0x078, 0x008, 0x010, 0x060, 0x000,
	0x000, 0x000, 0x020, 0x000, 0x000, 0x020, 0x000, 0x000,
	0x000, 0x000, 0x020, 0x000, 0x000, 0x020, 0x020, 0x040,
	0x018, 0x030, 0x060, 0x0C0, 0x060, 0x030, 0x018, 0x000,
	0x000, 0x000, 0x0F8, 0x000, 0x0F8, 0x000, 0x000, 0x000,
	0x0C0, 0x060, 0x030, 0x018, 0x030, 0x060, 0x0C0, 0x000,
	0x070, 0x088, 0x008, 0x010, 0x020, 0x000, 0x020, 0x000,
	0x070, 0x088, 0x008, 0x068, 0x0A8, 0x0A8, 0x070, 0x000,
	0x020, 0x050, 0x088, 0x088, 0x0F8, 0x088, 0x088, 0x000,
	0x0F0, 0x048, 0x048, 0x070, 0x048, 0x048, 0x0F0, 0x000,
	0x030, 0x048, 0x080, 0x080, 0x080, 0x048, 0x030, 0x000,
	0x0E0, 0x050, 0x048, 0x048, 0x048, 0x050, 0x0E0, 0x000,
	0x0F8, 0x080, 0x080, 0x0F0, 0x080, 0x080, 0x0F8, 0x000,
	0x0F8, 0x080, 0x080, 0x0F0, 0x080, 0x080, 0x080, 0x000,
	0x070, 0x088, 0x080, 0x0B8, 0x088, 0x088, 0x070, 0x000,
	0x088, 0x088, 0x088, 0x0F8, 0x088, 0x088, 0x088, 0x000,
	0x070, 0x020, 0x020, 0x020, 0x020, 0x020, 0x070, 0x000,
	0x038, 0x010, 0x010, 0x010, 0x090, 0x090, 0x060, 0x000,
	0x088, 0x090, 0x0A0, 0x0C0, 0x0A0, 0x090, 0x088, 0x000,
	0x080, 0x080, 0x080, 0x080, 0x080, 0x080, 0x0F8, 0x000,
	0x088, 0x0D8, 0x0A8, 0x0A8, 0x088, 0x088, 0x088, 0x000,
	0x088, 0x0C8, 0x0C8, 0x0A8, 0x098, 0x098, 0x088, 0x000,
	0x070, 0x088, 0x088, 0x088, 0x088, 0x088, 0x070, 0x000,
	0x0F0, 0x088, 0x088, 0x0F0, 0x080, 0x080, 0x080, 0x000,
	0x070, 0x088, 0x088, 0x088, 0x0A8, 0x090, 0x068, 0x000,
	0x0F0, 0x088, 0x088, 0x0F0, 0x0A0, 0x090, 0x088, 0x000,
	0x070, 0x088, 0x080, 0x070, 0x008, 0x088, 0x070, 0x000,
	0x0F8, 0x020, 0x020, 0x020, 0x020, 0x020, 0x020, 0x000,
	0x088, 0x088, 0x088, 0x088, 0x088, 0x088, 0x070, 0x000,
	0x088, 0x088, 0x088, 0x088, 0x050, 0x050, 0x020, 0x000,
	0x088, 0x088, 0x088, 0x0A8, 0x0A8, 0x0D8, 0x088, 0x000,
	0x088, 0x088, 0x050, 0x020, 0x050, 0x088, 0x088, 0x000,
	0x088, 0x088, 0x088, 0x070, 0x020, 0x020, 0x020, 0x000,
	0x0F8, 0x008, 0x010, 0x020, 0x040, 0x080, 0x0F8, 0x000,
	0x070, 0x040, 0x040, 0x040, 0x040, 0x040, 0x070, 0x000,
	0x088, 0x050, 0x020, 0x070, 0x020, 0x070, 0x020, 0x000,
	0x070, 0x010, 0x010, 0x010, 0x010, 0x010, 0x070, 0x000,
	0x020, 0x050, 0x088, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x0F8, 0x000,
	0x040, 0x020, 0x010, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x000, 0x000, 0x070, 0x008, 0x078, 0x088, 0x078, 0x000,
	0x080, 0x080, 0x0B0, 0x0C8, 0x088, 0x0C8, 0x0B0, 0x000,
	0x000, 0x000, 0x070, 0x088, 0x080, 0x088, 0x070, 0x000,
	0x008, 0x008, 0x068, 0x098, 0x088, 0x098, 0x068, 0x000,
	0x000, 0x000, 0x070, 0x088, 0x0F8, 0x080, 0x070, 0x000,
	0x010, 0x028, 0x020, 0x0F8, 0x020, 0x020, 0x020, 0x000,
	0x000, 0x000, 0x068, 0x098, 0x098, 0x068, 0x008, 0x070,
	0x080, 0x080, 0x0F0, 0x088, 0x088, 0x088, 0x088, 0x000,
	0x020, 0x000, 0x060, 0x020, 0x020, 0x020, 0x070, 0x000,
	0x010, 0x000, 0x030, 0x010, 0x010, 0x010, 0x090, 0x060,
	0x040, 0x040, 0x048, 0x050, 0x060, 0x050, 0x048, 0x000,
	0x060, 0x020, 0x020, 0x020, 0x020, 0x020, 0x070, 0x000,
	0x000, 0x000, 0x0D0, 0x0A8, 0x0A8, 0x0A8, 0x0A8, 0x000,
	0x000, 0x000, 0x0B0, 0x0C8, 0x088, 0x088, 0x088, 0x000,
	0x000, 0x000, 0x070, 0x088, 0x088, 0x088, 0x070, 0x000,
	0x000, 0x000, 0x0B0, 0x0C8, 0x0C8, 0x0B0, 0x080, 0x080,
	0x000, 0x000, 0x068, 0x098, 0x098, 0x068, 0x008, 0x008,
	0x000, 0x000, 0x0B0, 0x0C8, 0x080, 0x080, 0x080, 0x000,
	0x000, 0x000, 0x078, 0x080, 0x0F0, 0x008, 0x0F0, 0x000,
	0x040, 0x040, 0x0F0, 0x040, 0x040, 0x048, 0x030, 0x000,
	0x000, 0x000, 0x090, 0x090, 0x090, 0x090, 0x068, 0x000,
	0x000, 0x000, 0x088, 0x088, 0x088, 0x050, 0x020, 0x000,
	0x000, 0x000, 0x088, 0x0A8, 0x0A8, 0x0A8, 0x050, 0x000,
	0x000, 0x000, 0x088, 0x050, 0x020, 0x050, 0x088, 0x000,
	0x000, 0x000, 0x088, 0x088, 0x098, 0x068, 0x008, 0x070,
	0x000, 0x000, 0x0F8, 0x010, 0x020, 0x040, 0x0F8, 0x000,
	0x018, 0x020, 0x020, 0x040, 0x020, 0x020, 0x018, 0x000,
	0x020, 0x020, 0x020, 0x000, 0x020, 0x020, 0x020, 0x000,
	0x0C0, 0x020, 0x020, 0x010, 0x020, 0x020, 0x0C0, 0x000,
	0x040, 0x0A8, 0x010, 0x000, 0x000, 0x000, 0x000, 0x000,
	0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000, 0x000,
};
// CLCDView

IMPLEMENT_DYNAMIC(CLCDView, CStatic)

#define BG_COL	RGB(167, 234, 209)
#define FG_COL	RGB(16, 23, 20)
#define OS_CX	108
#define OS_CY	80
#define HMGN	6
#define VMGN	8
#define CHAR_CX	6
#define CHAR_CY	8

CLCDView::CLCDView()
{
	hMemDC = CreateCompatibleDC(NULL);
	BITMAPINFO bmi;
	bmi.bmiHeader.biBitCount = 24;
	bmi.bmiHeader.biClrImportant = 0;
	bmi.bmiHeader.biClrUsed = 0;
	bmi.bmiHeader.biCompression = 0;
	bmi.bmiHeader.biHeight = OS_CY;
	bmi.bmiHeader.biPlanes = 1;
	bmi.bmiHeader.biSize = sizeof(BITMAPINFO);
	bmi.bmiHeader.biSizeImage = 0;
	bmi.bmiHeader.biWidth = OS_CX;
	bmi.bmiHeader.biXPelsPerMeter = 0;
	bmi.bmiHeader.biYPelsPerMeter = 0;
	hBmp = CreateDIBSection(hMemDC, &bmi, DIB_RGB_COLORS, &pBmp, NULL, 0);
	hOld = (HBITMAP)SelectObject(hMemDC, (HGDIOBJ)hBmp);
	CDC memDC;
	memDC.Attach(hMemDC);
	memDC.FillSolidRect(0, 0, OS_CX, OS_CY, BG_COL);
	memDC.Detach();
}

CLCDView::~CLCDView()
{
	SelectObject(hMemDC, (HGDIOBJ)hOld);
	DeleteObject((HGDIOBJ)hBmp);
	DeleteDC(hMemDC);
}


BEGIN_MESSAGE_MAP(CLCDView, CStatic)
	ON_WM_PAINT()
END_MESSAGE_MAP()



// CLCDView メッセージ ハンドラー

void CLCDView::OnPaint()
{
	CPaintDC dc(this); // device context for painting
					   // TODO: ここにメッセージ ハンドラー コードを追加します。
					   // 描画メッセージで CStatic::OnPaint() を呼び出さないでください。
	CDC memDC;
	memDC.Attach(hMemDC);
	CRect rcbounds;
	this->GetWindowRect(&rcbounds);
	dc.StretchBlt(0, 0, rcbounds.Width(), rcbounds.Height(), &memDC, 0, 0, 108, 80, SRCCOPY);
	memDC.Detach();
}

void CLCDView::SetCap(char* cap)
{
	if (lstrcmp(caption, cap)) {
		lstrcpyn(caption, cap, 16);
		for (int i = 0; i < 16; i++) {
			DrawChar(HMGN + (i * CHAR_CX), VMGN, caption[i]);
		}
		InvalidateRect(0, 0);
	}
}

void CLCDView::SetDot(BYTE dot[16][16])
{
	if (memcmp(dot, lcddot, 16 * 16)) {
		memcpy(lcddot, dot, 16 * 16);
		InvalidateRect(0, 0);
	}
}

void CLCDView::DrawChar(int x, int y, char ch)
{
	CDC memDC;
	memDC.Attach(hMemDC);
	ch &= 0x7f;
	for (int v = 0; v < 8; v++) {
		BYTE bitpat = fonttable[ch * 8 + v];
		BYTE mask = 0x80;
		for (int u = 0; u < 6; u++) {
			COLORREF col = (bitpat & mask) ? FG_COL : BG_COL;
			memDC.FillSolidRect(x + u, y + v, 1, 1, col);
			mask >>= 1;
		}
	}
	memDC.Detach();
}